{
  "swagger": "2.0",
  "info": {
    "title": "Noname-gaming API",
    "description": "Send forward your gaming community using Noname-gaming API",
    "version": "0.2.0"
  },
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Security",
      "description": "login and permissions, email verify"
    },
    {
      "name": "User",
      "description": "accounts, friends, interests"
    },
    {
      "name": "Game",
      "description": "games, users' games"
    },
    {
      "name": "PlayerAccount",
      "description": "player account, game properties"
    },
    {
      "name": "PlayerAccountProperty",
      "description": "player account(s) properties"
    },
    {
      "name": "Address",
      "description": "addresses, users' addresses"
    },
    {
      "name": "Team",
      "description": "teams, captain, manage teams"
    },
    {
      "name": "TeamProperty",
      "description": "teams's properties"
    },
    {
      "name": "Registration",
      "description": "user registration steps management"
    },
    {
      "name": "News",
      "description": "news"
    },
    {
      "name": "Streamings",
      "description": "streaming management"
    }
  ],
  "basePath": "/api",
  "paths": {
    "/auth": {
      "post": {
        "x-swagger-router-controller": "AuthController",
        "operationId": "authenticate",
        "tags": [
          "Security"
        ],
        "summary": "Authenticates a user",
        "description": "Authenticates the user against the DB.",
        "parameters": [
          {
            "name": "authRequest",
            "in": "body",
            "description": "Credentials object to authenticate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User has been successfully logged in"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "x-swagger-router-controller": "UserController",
        "operationId": "getUsers",
        "tags": [
          "User"
        ],
        "summary": "Get all users",
        "description": "Gets `User` objects.\nOptional query param of **size** determines\nsize of returned array\n",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Users",
            "schema": {
              "title": "ArrayOfUsers",
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/addUser": {
      "post": {
        "x-swagger-router-controller": "UserController",
        "operationId": "addUser",
        "tags": [
          "User"
        ],
        "summary": "Adds a new user",
        "description": "Adds new `User` object to the DB.",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User object to insert",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User has been successfully added to the DB"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}/getUserById": {
      "get": {
        "x-swagger-router-controller": "UserController",
        "operationId": "getUserById",
        "tags": [
          "User"
        ],
        "summary": "Gets the specified user",
        "description": "Gets `User` object specified by its ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A 'User' object.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{username}/getUserByUsername": {
      "get": {
        "x-swagger-router-controller": "UserController",
        "operationId": "getUserByUsername",
        "tags": [
          "User"
        ],
        "summary": "Gets the corresponding matching user",
        "description": "Gets `User` object specified by its username.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username of User to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A 'User' object.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}/updateUser": {
      "put": {
        "x-swagger-router-controller": "UserController",
        "operationId": "updateUser",
        "tags": [
          "User"
        ],
        "summary": "Updates the corresponding user basic properties",
        "description": "Update `User` object specified by its ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "userObject",
            "in": "body",
            "description": "User object that will update the old one.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A 'User' object.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}/updatePassword": {
      "put": {
        "x-swagger-router-controller": "UserController",
        "operationId": "updatePassword",
        "tags": [
          "User"
        ],
        "summary": "Updates the corresponding user password",
        "description": "Update password attr of `User` object specified by its ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "body",
            "description": "Object containing old password (to verify before updating) and new one to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A 'User' object.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}/updateEmail": {
      "put": {
        "x-swagger-router-controller": "UserController",
        "operationId": "updateEmail",
        "tags": [
          "User"
        ],
        "summary": "Updates the corresponding user email",
        "description": "Update email attr of `User` object specified by its ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "body",
            "description": "New email to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated User object.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}/deleteUser": {
      "put": {
        "x-swagger-router-controller": "UserController",
        "operationId": "deleteUser",
        "tags": [
          "User"
        ],
        "summary": "Deactivates the corresponding user account",
        "description": "Deactivate `User` object specified by its ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to deactivate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deactivated User object",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/verify/{email}": {
      "get": {
        "x-swagger-router-controller": "UserController",
        "operationId": "verifyUserEmail",
        "tags": [
          "Security"
        ],
        "summary": "Verify user email",
        "description": "Verify user email",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "Email to verify",
            "required": true,
            "type": "string"
          },
          {
            "name": "t",
            "in": "query",
            "description": "token to verify for this email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User email successfully verified"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/isVerified/{email}": {
      "get": {
        "x-swagger-router-controller": "UserController",
        "operationId": "isUserVerified",
        "tags": [
          "Security"
        ],
        "summary": "Check if user email is verified",
        "description": "Check if user email is verified",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "User email to verify",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User email is verified"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "x-swagger-router-controller": "RegistrationController",
        "operationId": "registerUser",
        "tags": [
          "Registration"
        ],
        "summary": "Creates a new user based on his email address",
        "description": "Adds new `User` object to the DB based on its email",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User's email to base user's creation on",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User has been successfully added to the DB"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/register/{email}/step0": {
      "get": {
        "x-swagger-router-controller": "RegistrationController",
        "operationId": "registerUserVerifyEmail",
        "tags": [
          "Registration"
        ],
        "summary": "Verify user's email before starting registration process (step 0)",
        "description": "Verify an user based on his email and token",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "Email to verify and register",
            "required": true,
            "type": "string"
          },
          {
            "name": "t",
            "in": "query",
            "description": "Token to verify this email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User email successfully verified"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/register/{userId}/step1": {
      "put": {
        "x-swagger-router-controller": "RegistrationController",
        "operationId": "registerUpdateUser",
        "tags": [
          "Registration"
        ],
        "summary": "Updates the corresponding registering user basic properties (step 1)",
        "description": "Update registering `User` object specified by its userId.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "registerUserObject",
            "in": "body",
            "description": "User object that will update the old one.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A 'User' object.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/register/{email}/isVerified": {
      "get": {
        "x-swagger-router-controller": "RegistrationController",
        "operationId": "isUserVerified",
        "tags": [
          "Registration"
        ],
        "summary": "Check if user email is verified",
        "description": "Check if user email is verified",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "User email to verify",
            "required": true,
            "type": "string"
          },
          {
            "name": "t",
            "in": "query",
            "description": "Token to verify this email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User email is verified"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/register/{userId}/completeRegistration": {
      "put": {
        "x-swagger-router-controller": "RegistrationController",
        "operationId": "completeRegistration",
        "tags": [
          "Registration"
        ],
        "summary": "Completes the registration of the given user",
        "description": "Delete fields accRegisterToken and accRegisterTokenExpires from the given user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "t",
            "in": "query",
            "description": "Registration token to verify user can perform action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User has successfully completed registration"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/register/{userId}/cancelRegistration": {
      "delete": {
        "x-swagger-router-controller": "RegistrationController",
        "operationId": "cancelRegistration",
        "tags": [
          "Registration"
        ],
        "summary": "Cancels the registration of the given user",
        "description": "Delete the given user from DB",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to remove.",
            "required": true,
            "type": "string"
          },
          {
            "name": "t",
            "in": "query",
            "description": "Registration token to verify user can perform action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User has successfully been removed from DB"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/addresses": {
      "get": {
        "x-swagger-router-controller": "AddressController",
        "operationId": "getAddresses",
        "tags": [
          "Address"
        ],
        "summary": "Get all addresses from DB",
        "description": "Gets all `Address` objects from DB.",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of 'Address' objects.",
            "schema": {
              "title": "ArrayOfAddresses",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/addresses/{userId}/addAddress": {
      "post": {
        "x-swagger-router-controller": "UserAddressController",
        "operationId": "addAddress",
        "tags": [
          "Address"
        ],
        "summary": "Adds a new Address to the User",
        "description": "Adds new `Address` object to the `User` object to the DB.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "address",
            "in": "body",
            "description": "Address object to add to the User object",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User has been successfully added to the DB"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/addresses/{userId}/getUserAddresses": {
      "get": {
        "x-swagger-router-controller": "UserAddressController",
        "operationId": "getUserAddresses",
        "tags": [
          "Address"
        ],
        "summary": "Get all addresses of the specified user from DB",
        "description": "Gets all `Address` objects of the specified User from DB.",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to search addresses for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of 'Address' objects.",
            "schema": {
              "title": "ArrayOfAddresses",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/addresses/{addressId}/getAddressById": {
      "get": {
        "x-swagger-router-controller": "UserAddressController",
        "operationId": "getAddressById",
        "tags": [
          "Address"
        ],
        "summary": "Get the corresponding `Address` object from DB",
        "description": "Gets the `Address` object specified byt its ID.",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "addressId of Address object to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved Address object",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/addresses/{userId}/updateAddress/{addressId}": {
      "put": {
        "x-swagger-router-controller": "UserAddressController",
        "operationId": "updateAddress",
        "tags": [
          "Address"
        ],
        "summary": "Updates the corresponding user address",
        "description": "Update `User` object address specified by its ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "addressId of Address to add in User object addressList.",
            "required": true,
            "type": "string"
          },
          {
            "name": "address",
            "in": "body",
            "description": "Address object of User object to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated User object",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/addresses/{addressId}/deactivateAddress": {
      "put": {
        "x-swagger-router-controller": "UserAddressController",
        "operationId": "deactivateAddress",
        "tags": [
          "Address"
        ],
        "summary": "Deactivates the corresponding address",
        "description": "Deactivates `Address` object specified by its ID.",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "addressId of `Address` object to update.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deactivated `Address` object.",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/games": {
      "get": {
        "x-swagger-router-controller": "GameController",
        "operationId": "getGames",
        "tags": [
          "Game"
        ],
        "summary": "Gets all games",
        "description": "Gets `Game` objects.\nOptional query param of **size** determines\nsize of returned array\n",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Games",
            "schema": {
              "title": "ArrayOfGames",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Game"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/games/addGame": {
      "post": {
        "x-swagger-router-controller": "GameController",
        "operationId": "addGame",
        "tags": [
          "Game"
        ],
        "summary": "Adds a game",
        "description": "Adds new `Game` object to the DB.",
        "parameters": [
          {
            "name": "game",
            "in": "body",
            "description": "Game object to insert",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game has been successfully added to the DB"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/games/{gameId}/getGameById": {
      "get": {
        "x-swagger-router-controller": "GameController",
        "operationId": "getGameById",
        "tags": [
          "Game"
        ],
        "summary": "Get the specified game",
        "description": "Gets `Game` object specified by its ID.",
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "gameId of Game object to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved Game object",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/games/{gameName}/getGameByName": {
      "get": {
        "x-swagger-router-controller": "GameController",
        "operationId": "getGameByName",
        "tags": [
          "Game"
        ],
        "summary": "Get the corresponding game based on the game name",
        "description": "Gets `Game` object specified by its name.",
        "parameters": [
          {
            "name": "gameName",
            "in": "path",
            "description": "Game's name to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved Game object",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/games/{userId}/getUserGames": {
      "get": {
        "x-swagger-router-controller": "GameController",
        "operationId": "getUserGames",
        "tags": [
          "Game"
        ],
        "summary": "Get the games for user with given userId",
        "description": "Gets `Game` objects for which user with given userId has at least one registered player account",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user Id of user to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Games",
            "schema": {
              "title": "ArrayOfGames",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Game"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/games/{gameId}/updateGame": {
      "put": {
        "x-swagger-router-controller": "GameController",
        "operationId": "updateGame",
        "tags": [
          "Game"
        ],
        "summary": "Update the corresponding game",
        "description": "Update `Game` object specified by its ID.",
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "gameId of Game object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameObject",
            "in": "body",
            "description": "Game object that will update the old one.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Game object",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/games/{gameId}/deleteGame": {
      "put": {
        "x-swagger-router-controller": "GameController",
        "operationId": "deleteGame",
        "tags": [
          "Game"
        ],
        "summary": "Deactivate the corresponding game",
        "description": "Deactivates the 'Game' object specified by its ID.",
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "gameId of Game object to deactivate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deactivated Game object",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccounts": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountController",
        "operationId": "getPlayerAccountList",
        "tags": [
          "PlayerAccount"
        ],
        "summary": "Get all PlayerAccounts",
        "description": "Gets `PlayerAccount` objects.\nOptional query param of **size** determines\nsize of returned array\n",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of PlayerAccount",
            "schema": {
              "title": "ArrayOfPlayerAccount",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerAccount"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccounts/{userId}/addPlayerAccount/{gameId}": {
      "post": {
        "x-swagger-router-controller": "PlayerAccountController",
        "operationId": "addPlayerAccount",
        "tags": [
          "PlayerAccount"
        ],
        "summary": "Adds a new PlayerAccount",
        "description": "Adds new `PlayerAccount` object to the DB.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of player object to add.",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "gameId of player object to add.",
            "required": true,
            "type": "string"
          },
          {
            "name": "PlayerAccount",
            "in": "body",
            "description": "PlayerAccount object to insert",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreatePlayedAccountObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PlayerAccount has been successfully added to the DB"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccounts/{playerAccountId}/getPlayerAccountById": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountController",
        "operationId": "getPlayerAccountById",
        "tags": [
          "PlayerAccount"
        ],
        "summary": "Get the specified PlayerAccount",
        "description": "Gets `PlayerAccount` object specified by its ID.",
        "parameters": [
          {
            "name": "playerAccountId",
            "in": "path",
            "description": "playerAcountId of PlayerAccount object to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved PlayerAccount object",
            "schema": {
              "$ref": "#/definitions/PlayerAccount"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccounts/{userId}/game/{gameId}": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountController",
        "operationId": "getPlayerAccountsByUserAndGame",
        "tags": [
          "PlayerAccount"
        ],
        "summary": "Get the playerAccounts related to the given game for the given user",
        "description": "Gets `PlayerAccount` objects related to the given game for the given user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to search for.",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "gameId of the Game object to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of PlayerAccount",
            "schema": {
              "title": "ArrayOfPlayerAccount",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerAccount"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccounts/{userId}/getPlayerAccountByUserId": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountController",
        "operationId": "getPlayerAccountByUserId",
        "tags": [
          "PlayerAccount"
        ],
        "summary": "Get the corresponding PlayerAccount based on the PlayerAccount UserId",
        "description": "Gets `player` object specified by its UserId.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of PlayerAccount object to find.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Players",
            "schema": {
              "title": "ArrayOfPlayers",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerAccount"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccounts/{login}/getPlayerAccountByLogin": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountController",
        "operationId": "getPlayerAccountByLogin",
        "tags": [
          "PlayerAccount"
        ],
        "description": "Gets `player` object specified by its login.",
        "summary": "Get the corresponding PlayerAccount based on the PlayerAccount login",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "description": "login of PlayerAccount object to find.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved PlayerAccount object",
            "schema": {
              "$ref": "#/definitions/PlayerAccount"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccounts/{playerAccountId}/updatePlayerAccount": {
      "put": {
        "x-swagger-router-controller": "PlayerAccountController",
        "operationId": "updatePlayerAccount",
        "tags": [
          "PlayerAccount"
        ],
        "description": "Updates the 'PlayerAccount' object specified by its ID.",
        "summary": "Update the corresponding PlayerAccount",
        "parameters": [
          {
            "name": "playerAccountId",
            "in": "path",
            "description": "playerAccountId of PlayerAccount object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "login",
            "in": "body",
            "description": "new login of PlayerAccount object to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePlayerAccountObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated PlayerAccount object",
            "schema": {
              "$ref": "#/definitions/PlayerAccount"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccounts/{playerAccountId}/deletePlayerAccount": {
      "put": {
        "x-swagger-router-controller": "PlayerAccountController",
        "operationId": "deletePlayerAccount",
        "tags": [
          "PlayerAccount"
        ],
        "description": "Deactivates the 'PlayerAccount' object specified by its ID.",
        "summary": "Deactivate the corresponding PlayerAccount",
        "parameters": [
          {
            "name": "playerAccountId",
            "in": "path",
            "description": "playerAccountId of PlayerAccount object to deactivate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated PlayerAccount object",
            "schema": {
              "$ref": "#/definitions/PlayerAccount"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccountProperties/properties": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "getPlayerAccountsProperties",
        "tags": [
          "PlayerAccountProperty"
        ],
        "summary": "Get all PlayerAccountProperty of all PlayerAccounts",
        "description": "Gets all `PlayerAccountProperty` objects of all PlayerAccounts.\nOptional query param of **size** determines\nsize of returned array\n",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of all PlayerAccountProperty of all PlayerAccounts",
            "schema": {
              "title": "ArrayOfPlayerAccountProperty",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerAccountProperty"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccountProperties/{playerAccountPropertyId}": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "getPlayerAccountPropertyById",
        "tags": [
          "PlayerAccountProperty"
        ],
        "summary": "Get PlayerAccountProperty based on the given PlayerAccountPropertyId",
        "description": "Get PlayerAccountProperty based on the given PlayerAccountPropertyId",
        "parameters": [
          {
            "name": "playerAccountPropertyId",
            "in": "path",
            "description": "_id of the PlayerAccountProperty object to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved PlayerAccountProperty object",
            "schema": {
              "$ref": "#/definitions/PlayerAccountProperty"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "updatePlayerAccountPropertyById",
        "tags": [
          "PlayerAccountProperty"
        ],
        "summary": "Update the value for the given PlayerAccountProperty with the given PlayerAccountPropertyId",
        "description": "Update the value for the given PlayerAccountProperty object specified by its PlayerAccountPropertyId",
        "parameters": [
          {
            "name": "playerAccountPropertyId",
            "in": "path",
            "description": "_id of PlayerAccountProperty object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerAccountPropertyObject",
            "in": "body",
            "description": "PlayerAccountProperty object that will update the old one.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlayerAccountPropertyUpdateObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved PlayerAccountProperty object",
            "schema": {
              "$ref": "#/definitions/PlayerAccountProperty"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "deletePlayerAccountPropertyById",
        "tags": [
          "PlayerAccountProperty"
        ],
        "summary": "Delete the given PlayerAccountProperty with the given playerAccountPropertyId",
        "description": "Delete the given PlayerAccountProperty object specified by its playerAccountPropertyId",
        "parameters": [
          {
            "name": "playerAccountPropertyId",
            "in": "path",
            "description": "_id of PlayerAccountProperty to remove.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Removed PlayerAccountProperty object",
            "schema": {
              "$ref": "#/definitions/PlayerAccountProperty"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccountProperties/propertiesByKey/{key}": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "getPlayerAccountsPropertiesByKey",
        "tags": [
          "PlayerAccountProperty"
        ],
        "summary": "Get all PlayerAccountProperty with existing given key from all PlayerAccounts ",
        "description": "Gets all `PlayerAccountProperty` objects with existing given key from all PlayerAccounts.\nOptional query param of **size** determines\nsize of returned array\n",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "key",
            "in": "path",
            "description": "key of PlayerAccountProperty to search occurrences for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of all PlayerAccountProperty with existing given key from all PlayerAccounts",
            "schema": {
              "title": "ArrayOfPlayerAccountProperty",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerAccountProperty"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccountProperties/propertiesByValue/{value}": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "getPlayerAccountsPropertiesByValue",
        "tags": [
          "PlayerAccountProperty"
        ],
        "summary": "Get all PlayerAccountProperty with existing given value from all PlayerAccounts ",
        "description": "Gets all `PlayerAccountProperty` objects with existing given value from all PlayerAccounts.\nOptional query param of **size** determines\nsize of returned array\n",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "value",
            "in": "path",
            "description": "value of PlayerAccountProperty to search occurrences for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of all PlayerAccountProperty with existing given value from all PlayerAccounts",
            "schema": {
              "title": "ArrayOfPlayerAccountProperty",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerAccountProperty"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccountProperties/{playerAccountId}/properties": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "getPlayerAccountProperties",
        "tags": [
          "PlayerAccountProperty"
        ],
        "summary": "Get all PlayerAccountProperties of the given PlayerAccount",
        "description": "Get all PlayerAccountProperty objects of the given PlayerAccount",
        "parameters": [
          {
            "name": "playerAccountId",
            "in": "path",
            "description": "playerAccountId of PlayerAccount linked to the PlayerAccountProperty objects to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of all PlayerAccountProperty of the given PlayerAccount",
            "schema": {
              "title": "ArrayOfPlayerAccountProperty",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerAccountProperty"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccountProperties/{playerAccountId}/propertiesByKey/{key}": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "getPlayerAccountPropertyByKey",
        "tags": [
          "PlayerAccountProperty"
        ],
        "summary": "Get the values for the given PlayerAccountProperty key of the given PlayerAccount",
        "description": "Get the value(s - if more than one occurrence of the property identified by the given key) for the given PlayerAccountProperty object of the given PlayerAccount",
        "parameters": [
          {
            "name": "playerAccountId",
            "in": "path",
            "description": "playerAccountId of PlayerAccount linked to the PlayerAccountProperty objects to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "key of PlayerAccountProperty to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved PlayerAccountProperty object",
            "schema": {
              "$ref": "#/definitions/PlayerAccountProperty"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccountProperties/{playerAccountId}/propertiesByValue/{value}": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "getPlayerAccountPropertyByValue",
        "tags": [
          "PlayerAccountProperty"
        ],
        "summary": "Get the PlayerAccountProperty where value corresponds to the given value for the given PlayerAccount",
        "description": "Get the PlayerAccountProperty (could be more than one if it's the case) where value corresponds to the given value for the given PlayerAccount",
        "parameters": [
          {
            "name": "playerAccountId",
            "in": "path",
            "description": "playerAccountId of PlayerAccount linked to the PlayerAccountProperty objects to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "path",
            "description": "value of PlayerAccountProperty to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of all PlayerAccountProperty that match the value for the given PlayerAccount",
            "schema": {
              "title": "ArrayOfPlayerAccountProperty",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerAccountProperty"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccountProperties/{gameId}/getByGameId": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "getPlayerAccountPropertiesByGameId",
        "tags": [
          "PlayerAccountProperty"
        ],
        "summary": "Get the PlayerAccountProperties for the given game",
        "description": "Get the PlayerAccountProperties for the given game",
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "gameId of Game to retrieve corresponding PlayerAccountProperty keys.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of all PlayerAccountProperty keys of the given game",
            "schema": {
              "title": "ArrayOfPlayerAccountPropertyKeys",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccountProperties/{playerAccountId}/addProperty": {
      "post": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "addPlayerAccountProperty",
        "tags": [
          "PlayerAccountProperty"
        ],
        "summary": "Adds a PlayerAccountProperty",
        "description": "Adds new `PlayerAccountProperty` object to the DB.",
        "parameters": [
          {
            "name": "playerAccountId",
            "in": "path",
            "description": "playerAccountId of PlayerAccount linked to the PlayerAccountProperty object to add.",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerAccountProperty",
            "in": "body",
            "description": "PlayerAccountProperty object to insert",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePlayerAccountPropertyObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PlayerAccountProperty has been successfully added to the DB"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccountProperties/{playerAccountId}/updateProperty/{key}": {
      "put": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "updatePlayerAccountProperty",
        "tags": [
          "PlayerAccountProperty"
        ],
        "summary": "Update the values for the given PlayerAccountProperty key of the given PlayerAccount",
        "description": "Update the value for the given PlayerAccountProperty object specified by its key for the given PlayerAccount",
        "parameters": [
          {
            "name": "playerAccountId",
            "in": "path",
            "description": "playerAccountId of PlayerAccount linked to the PlayerAccountProperty objects to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "key of PlayerAccountProperty to update value",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerAccountPropertyObject",
            "in": "body",
            "description": "PlayerAccountProperty object that will update the old one.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlayerAccountPropertyUpdateObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated PlayerAccountProperty object",
            "schema": {
              "$ref": "#/definitions/PlayerAccountProperty"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccountProperties/{playerAccountId}/removeProperty/{key}": {
      "delete": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "deletePlayerAccountProperty",
        "tags": [
          "PlayerAccountProperty"
        ],
        "summary": "Delete the values for the given PlayerAccountProperty key of the given PlayerAccount",
        "description": "Delete the value for the given PlayerAccountProperty object specified by its key for the given PlayerAccount",
        "parameters": [
          {
            "name": "playerAccountId",
            "in": "path",
            "description": "playerAccountId of PlayerAccount linked to the PlayerAccountProperty objects to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "key of PlayerAccountProperty to remove",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Removed PlayerAccountProperty object",
            "schema": {
              "$ref": "#/definitions/PlayerAccountProperty"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "x-swagger-router-controller": "TeamController",
        "operationId": "getTeams",
        "tags": [
          "Team"
        ],
        "summary": "Gets all teams",
        "description": "Gets `Team` objects.\nOptional query param of **size** determines\nsize of returned array\n",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Teams",
            "schema": {
              "title": "ArrayOfTeams",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/{userId}/addTeam/{gameId}": {
      "post": {
        "x-swagger-router-controller": "TeamController",
        "operationId": "addTeam",
        "tags": [
          "Team"
        ],
        "summary": "Adds a team",
        "description": "Adds new `Team` object to the DB.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to add as owner",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "gameId of game object to add.",
            "required": true,
            "type": "string"
          },
          {
            "name": "team",
            "in": "body",
            "description": "Team object to insert",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTeamObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team has been successfully added to the DB"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/{teamId}/addPlayer/{playerAccountId}": {
      "put": {
        "x-swagger-router-controller": "TeamController",
        "operationId": "addPlayer",
        "tags": [
          "Team"
        ],
        "summary": "Adds a player to a team",
        "description": "Adds new `PlayerAccount` object to the given team's players.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "teamId of team object to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerAccountId",
            "in": "path",
            "description": "playerAccountId of PlayerAccount object to add to the team.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PlayerAccount has been successfully added to the team"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/{teamId}/removePlayer/{playerAccountId}": {
      "put": {
        "x-swagger-router-controller": "TeamController",
        "operationId": "removePlayer",
        "tags": [
          "Team"
        ],
        "summary": "Removes a player from a team",
        "description": "Removes `PlayerAccount` object from the given team's players list",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "teamId of team object to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerAccountId",
            "in": "path",
            "description": "playerAccountId of PlayerAccount object to remove from the team.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PlayerAccount has been successfully removed from the team"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/{teamId}/getTeamById": {
      "get": {
        "x-swagger-router-controller": "TeamController",
        "operationId": "getTeamById",
        "tags": [
          "Team"
        ],
        "summary": "Get the specified team",
        "description": "Gets `Team` object specified by its ID.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "teamId of Team object to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved Team object",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/{userId}/games/{gameId}": {
      "get": {
        "x-swagger-router-controller": "TeamController",
        "operationId": "getTeamsByUserIdByGameId",
        "tags": [
          "Team"
        ],
        "summary": "Get the specified teams for the given user and the given game",
        "description": "Gets `Team` objects for the given user and the given game.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to search for.",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "gameId of Game object to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of retrieved Team objects",
            "schema": {
              "title": "ArrayOfTeams",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/{userId}": {
      "get": {
        "x-swagger-router-controller": "TeamController",
        "operationId": "getTeamsByUserId",
        "tags": [
          "Team"
        ],
        "summary": "Get the specified teams for the given user",
        "description": "Gets `Team` objects for the given user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of retrieved Team objects",
            "schema": {
              "title": "ArrayOfTeams",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/{teamName}/getTeamByName": {
      "get": {
        "x-swagger-router-controller": "TeamController",
        "operationId": "getTeamByName",
        "tags": [
          "Team"
        ],
        "summary": "Get the corresponding game based on the team name",
        "description": "Gets `Team` object specified by its name.",
        "parameters": [
          {
            "name": "teamName",
            "in": "path",
            "description": "Team's name to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved Team object",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/{teamName}/getTeamsByName": {
      "get": {
        "x-swagger-router-controller": "TeamController",
        "operationId": "getTeamsByName",
        "tags": [
          "Team"
        ],
        "summary": "Get the corresponding teams based by the team name",
        "description": "Get array of `Team` objects specified by its name.",
        "parameters": [
          {
            "name": "teamName",
            "in": "path",
            "description": "Team's name to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved Team object",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/{teamName}/getTeamsByLikeName": {
      "get": {
        "x-swagger-router-controller": "TeamController",
        "operationId": "getTeamsByLikeName",
        "tags": [
          "Team"
        ],
        "summary": "Get the corresponding teams based by the team name",
        "description": "Get array of `Team` objects specified by like name.",
        "parameters": [
          {
            "name": "teamName",
            "in": "path",
            "description": "Team's name to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved Team object",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/{teamId}/updateTeam": {
      "put": {
        "x-swagger-router-controller": "TeamController",
        "operationId": "updateTeam",
        "tags": [
          "Team"
        ],
        "summary": "Update the corresponding team",
        "description": "Update `Team` object specified by its ID.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "teamId of Team object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "teamObject",
            "in": "body",
            "description": "Team object that will update the old one.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTeamObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Team object",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/{teamId}/updateCaptain/{playerAccountId}": {
      "put": {
        "x-swagger-router-controller": "TeamController",
        "operationId": "updateCaptain",
        "tags": [
          "Team"
        ],
        "summary": "Update the corresponding team's captain",
        "description": "Update `Team` object's captain specified by its ID.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "teamId of Team object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerAccountId",
            "in": "path",
            "description": "playerAccountId of PlayerAccount object to set as team captain.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Team object",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/{teamId}/deleteTeam": {
      "put": {
        "x-swagger-router-controller": "TeamController",
        "operationId": "deleteTeam",
        "tags": [
          "Team"
        ],
        "summary": "Deactivate the corresponding team",
        "description": "Deactivates the 'Team' object specified by its ID.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "teamId of Game object to deactivate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deactivated Team object",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teamProperties": {
      "get": {
        "x-swagger-router-controller": "TeamPropertyController",
        "operationId": "getTeamsProperties",
        "tags": [
          "TeamProperty"
        ],
        "summary": "Get all TeamProperty from DB",
        "description": "Get all TeamProperty from DB",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of TeamProperty",
            "schema": {
              "title": "ArrayOfTeamProperty",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamProperty"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teamProperties/{teamPropertyId}": {
      "get": {
        "x-swagger-router-controller": "TeamPropertyController",
        "operationId": "getTeamPropertyById",
        "tags": [
          "TeamProperty"
        ],
        "summary": "Get TeamProperty based on the given teamPropertyId",
        "description": "Get TeamProperty based on the given teamPropertyId",
        "parameters": [
          {
            "name": "teamPropertyId",
            "in": "path",
            "description": "_id of the TeamProperty object to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved TeamProperty object",
            "schema": {
              "$ref": "#/definitions/TeamProperty"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "x-swagger-router-controller": "TeamPropertyController",
        "operationId": "updateTeamPropertyById",
        "tags": [
          "TeamProperty"
        ],
        "summary": "Update the value for the given TeamProperty with the given teamPropertyId",
        "description": "Update the value for the given TeamProperty object specified by its teamPropertyId",
        "parameters": [
          {
            "name": "teamPropertyId",
            "in": "path",
            "description": "_id of TeamProperty object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "teamPropertyObject",
            "in": "body",
            "description": "TeamProperty object that will update the old one.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamPropertyUpdateObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved TeamProperty object",
            "schema": {
              "$ref": "#/definitions/TeamProperty"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "x-swagger-router-controller": "TeamPropertyController",
        "operationId": "deleteTeamPropertyById",
        "tags": [
          "TeamProperty"
        ],
        "summary": "Delete the given TeamProperty with the given teamPropertyId",
        "description": "Delete the given TeamProperty object specified by its teamPropertyId",
        "parameters": [
          {
            "name": "teamPropertyId",
            "in": "path",
            "description": "_id of TeamProperty to remove.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Removed TeamProperty object",
            "schema": {
              "$ref": "#/definitions/TeamProperty"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teamProperties/{teamId}/properties": {
      "get": {
        "x-swagger-router-controller": "TeamPropertyController",
        "operationId": "getTeamPropertiesByTeamId",
        "tags": [
          "TeamProperty"
        ],
        "summary": "Get all TeamProperty objects for the given team",
        "description": "Get all TeamProperty objects for the given team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "_id of the Team object to retrieve teamProperties for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved TeamProperty objects",
            "schema": {
              "title": "ArrayOfTeamProperty",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamProperty"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teamProperties/propertiesByKey/{key}": {
      "get": {
        "x-swagger-router-controller": "TeamPropertyController",
        "operationId": "getTeamsPropertiesByKey",
        "tags": [
          "TeamProperty"
        ],
        "summary": "Get all TeamProperty with existing given key from all Teams ",
        "description": "Gets all `TeamProperty` objects with existing given key from all Teams.\nOptional query param of **size** determines\nsize of returned array\n",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "key",
            "in": "path",
            "description": "key of TeamProperty to search occurrences for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of all TeamProperty with existing given key from all Teams",
            "schema": {
              "title": "ArrayOfTeamProperty",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamProperty"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teamProperties/propertiesByValue/{value}": {
      "get": {
        "x-swagger-router-controller": "TeamPropertyController",
        "operationId": "getTeamsPropertiesByValue",
        "tags": [
          "TeamProperty"
        ],
        "summary": "Get all TeamProperty with existing given value from all Teams ",
        "description": "Gets all `TeamProperty` objects with existing given value from all Teams.\nOptional query param of **size** determines\nsize of returned array\n",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "value",
            "in": "path",
            "description": "value of TeamProperty to search occurrences for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of all TeamProperty with existing given value from all Teams",
            "schema": {
              "title": "ArrayOfTeamProperty",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamProperty"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teamProperties/{teamId}/addProperty": {
      "post": {
        "x-swagger-router-controller": "TeamPropertyController",
        "operationId": "addTeamProperty",
        "tags": [
          "TeamProperty"
        ],
        "summary": "Adds a TeamProperty",
        "description": "Adds new `TeamProperty` object to the DB.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "teamId of Team linked to the TeamProperty object to add.",
            "required": true,
            "type": "string"
          },
          {
            "name": "teamProperty",
            "in": "body",
            "description": "TeamProperty object to insert",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTeamPropertyObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TeamProperty has been successfully added to the DB"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teamProperties/{teamId}/propertiesByKey/{key}": {
      "get": {
        "x-swagger-router-controller": "TeamPropertyController",
        "operationId": "getTeamPropertyByKey",
        "tags": [
          "TeamProperty"
        ],
        "summary": "Get the TeamProperty where key corresponds to the given key for the given Team",
        "description": "Get the TeamProperty (could be more than one if it's the case) where key corresponds to the given key for the given Team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "teamId of Team linked to the TeamProperty objects to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "key of TeamProperty to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of all TeamProperty that match the value for the given Team",
            "schema": {
              "title": "ArrayOfTeamProperty",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamProperty"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teamProperties/{teamId}/propertiesByValue/{value}": {
      "get": {
        "x-swagger-router-controller": "TeamPropertyController",
        "operationId": "getTeamPropertyByValue",
        "tags": [
          "TeamProperty"
        ],
        "summary": "Get the TeamProperty where value corresponds to the given value for the given Team",
        "description": "Get the TeamProperty (could be more than one if it's the case) where value corresponds to the given value for the given Team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "teamId of Team linked to the TeamProperty objects to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "path",
            "description": "value of PlayerAccountProperty to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of all TeamProperty that match the value for the given Team",
            "schema": {
              "title": "ArrayOfTeamProperty",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamProperty"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teamProperties/{teamId}/updateProperty/{key}": {
      "put": {
        "x-swagger-router-controller": "TeamPropertyController",
        "operationId": "updatePlayerAccountProperty",
        "tags": [
          "TeamProperty"
        ],
        "summary": "Update the values for the given TeamProperty key of the given Team",
        "description": "Update the value for the given TeamProperty object specified by its key for the given Team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "teamId of Team linked to the TeamProperty objects to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "key of TeamProperty to update value",
            "required": true,
            "type": "string"
          },
          {
            "name": "teamPropertyObject",
            "in": "body",
            "description": "TeamProperty object that will update the old one.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamPropertyUpdateObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated TeamProperty object",
            "schema": {
              "$ref": "#/definitions/TeamProperty"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teamProperties/{teamId}/removeProperty/{key}": {
      "delete": {
        "x-swagger-router-controller": "PlayerAccountPropertyController",
        "operationId": "deletePlayerAccountProperty",
        "tags": [
          "TeamProperty"
        ],
        "summary": "Delete the values for the given PlayerAccountProperty key of the given Team",
        "description": "Delete the value for the given PlayerAccountProperty object specified by its key for the given Team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "teamId of Team linked to the TeamProperty objects to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "key of TeamProperty to remove",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Removed TeamProperty object",
            "schema": {
              "$ref": "#/definitions/TeamProperty"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teamProperties/{gameId}/getByGameId": {
      "get": {
        "x-swagger-router-controller": "TeamPropertyController",
        "operationId": "getTeamPropertiesByGameId",
        "tags": [
          "TeamProperty"
        ],
        "summary": "Get the TeamProperties for the given game",
        "description": "Get the TeamProperties for the given game",
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "gameId of Game to retrieve corresponding TeamProperty keys.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of all TeamProperty keys of the given game",
            "schema": {
              "title": "ArrayOfTeamPropertyKeys",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/news": {
      "get": {
        "x-swagger-router-controller": "NewsController",
        "operationId": "getNews",
        "tags": [
          "News"
        ],
        "summary": "Get the News",
        "description": "Get the News",
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "An array of all news",
            "schema": {
              "$ref": "#/definitions/News"
            }
          }
        }
      }
    },
    "/newsPolygon": {
      "get": {
        "x-swagger-router-controller": "NewsController",
        "operationId": "getNewsPolygon",
        "tags": [
          "News"
        ],
        "summary": "Get the News From Polygon",
        "description": "Get the News From Polygon",
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "An array of all news",
            "schema": {
              "$ref": "#/definitions/News"
            }
          }
        }
      }
    },
    "/newsIgn": {
      "get": {
        "x-swagger-router-controller": "NewsController",
        "operationId": "getNewsIgn",
        "tags": [
          "News"
        ],
        "summary": "Get the News From Ign",
        "description": "Get the News From Ign",
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "An array of all news",
            "schema": {
              "$ref": "#/definitions/News"
            }
          }
        }
      }
    },
    "/streaming/getLiveStreaming": {
      "get": {
        "x-swagger-router-controller": "StreamingController",
        "operationId": "getLiveStreaming",
        "tags": [
          "Streamings"
        ],
        "summary": "Get the corresponding streamings on live",
        "description": "Get array of live `Stream` objects.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved streaming object",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/streaming/{streamingName}/getStreamingByLikeName": {
      "get": {
        "x-swagger-router-controller": "StreamingController",
        "operationId": "getStreamingByLikeName",
        "tags": [
          "Streamings"
        ],
        "summary": "Get the corresponding streamings based by the streaming name",
        "description": "Get array of `Stream` objects specified by like name.",
        "parameters": [
          {
            "name": "streamingName",
            "in": "path",
            "description": "streaming's name to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved streaming object",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/streaming/{streamingName}/getStreamingByName": {
      "get": {
        "x-swagger-router-controller": "StreamingController",
        "operationId": "getStreamingByName",
        "tags": [
          "Streamings"
        ],
        "summary": "Get the corresponding streamings based by the streaming name",
        "description": "Get array of `Stream` objects specified by name.",
        "parameters": [
          {
            "name": "streamingName",
            "in": "path",
            "description": "streaming's name to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved streaming object",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "birthDate": {
          "type": "string",
          "format": "date"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "avatar": {
          "type": "string"
        },
        "address": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "phoneNumber": {
          "type": "string"
        },
        "admin": {
          "type": "boolean"
        },
        "friends": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "active": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "updated_at": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "RegisterUser": {
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "birthDate": {
          "type": "string",
          "format": "date"
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "passwordConfirmation": {
          "type": "string",
          "format": "password"
        },
        "phoneNumber": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "AuthRequest": {
      "type": "object",
      "properties": {
        "login": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "PlayerAccount": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        },
        "login": {
          "type": "string"
        },
        "game": {
          "$ref": "#/definitions/Game"
        },
        "active": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "updated_at": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "PlayerAccountProperty": {
      "type": "object",
      "properties": {
        "playerAccount": {
          "$ref": "#/definitions/PlayerAccount"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "updated_at": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "postCode": {
          "type": "integer",
          "format": "int32"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "line": {
          "type": "string"
        }
      }
    },
    "Game": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "releaseDate": {
          "type": "string",
          "format": "date"
        },
        "multiPlayer": {
          "type": "boolean"
        },
        "editor": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "updated_at": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "News": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "sortBy": {
          "type": "string"
        },
        "articles": {
          "type": "array",
          "items":{
            "$ref": "#/definitions/Article"
          }
        }
      }
    },
    "Article": {
      "type": "object",
      "properties": {
        "author": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "urlToImage": {
          "type": "string"
        },
        "publishedAt": {
          "type": "string"
        }
      }
    },
    "Team": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "captain": {
          "$ref": "#/definitions/PlayerAccount"
        },
        "players": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlayerAccount"
          }
        },
        "invitedPlayers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlayerAccount"
          }
        },
        "postulatedPlayers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlayerAccount"
          }
        },
        "active": {
          "type": "boolean"
        },
        "game": {
          "$ref": "#/definitions/Game"
        },
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "updated_at": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "TeamProperty": {
      "type": "object",
      "properties": {
        "playerAccount": {
          "$ref": "#/definitions/PlayerAccount"
        },
        "team": {
          "$ref": "#/definitions/Team"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "updated_at": {
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "team",
        "key",
        "value",
        "active",
        "created_at",
        "updated_at"
      ]
    },
    "ChangePassword": {
      "type": "object",
      "properties": {
        "oldPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        },
        "newPasswordConfirmation": {
          "type": "string"
        }
      }
    },
    "CreatePlayedAccountObject": {
      "type": "object",
      "properties": {
        "login": {
          "type": "string"
        }
      }
    },
    "UpdatePlayerAccountObject": {
      "type": "object",
      "properties": {
        "login": {
          "type": "string"
        }
      }
    },
    "CreatePlayerAccountPropertyObject": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "active": {
          "type": "string"
        }
      }
    },
    "CreateTeamPropertyObject": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "active": {
          "type": "string"
        },
        "playerAccount": {
          "type": "string"
        }
      },
      "required": [
        "key",
        "value",
        "active"
      ]
    },
    "PlayerAccountPropertyUpdateObject": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "TeamPropertyUpdateObject": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "CreateTeamObject": {
      "type": "object",
      "properties": {
        "teamName": {
          "type": "string"
        },
        "teamTag": {
          "type": "string"
        },
        "teamCountry": {
          "type": "string"
        },
        "captainPlayerAccountId": {
          "type": "string"
        }
      },
      "required": [
        "teamName",
        "teamTag",
        "teamCountry"
      ]
    },
    "Email": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "string"
        }
      }
    }
  }
}